package biblioteka;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Scanner;

public class OperacijeNadBazom {

	// metoda cita podatke iz baze vezabe za prosledjeni primarni kljuc, pravi
	// objekat i prikazuje podatke objekta
	public static void read(int id) {

		try {
			Connection conn = Konekcija.konekcija();
			String select = "SELECT * FROM clanovi WHERE id_clana = " + id;
			Statement ps = conn.createStatement();
			ResultSet rs = ps.executeQuery(select);

			while (rs.next()) {
				Clanovi clan = new Clanovi();
				clan.setId_clana(rs.getInt("id_clana"));
				clan.setIme(rs.getString("ime"));
				clan.setPrezime(rs.getString("prezime"));
				clan.setDatumRodjenja(rs.getString("datumRodjenja"));
				clan.setTelefon(rs.getString("telefon"));
				clan.setBrojClanskeKarte(rs.getString("brojClanskeKarte"));
				clan.setUlica(rs.getString("ulica"));
				clan.setBroj(rs.getString("broj"));

				System.out.println(clan.toString());
			}

			conn.close();
		} catch (SQLException e) {
			e.printStackTrace();
		}

	}

	// metod cita podatke iz baze, pravi objekte i ispisuje podatke objekata
	public static void read() throws SQLException {
		try {
			Connection conn = Konekcija.konekcija();
			String select = "SELECT * FROM clanovi";
			Statement stm = conn.createStatement();
			ResultSet rs = stm.executeQuery(select);

			while (rs.next()) {
				Clanovi clan = new Clanovi();
				clan.setId_clana(rs.getInt("id_clana"));
				clan.setIme(rs.getString("ime"));
				clan.setPrezime(rs.getString("prezime"));
				clan.setDatumRodjenja(rs.getString("datumRodjenja"));
				clan.setTelefon(rs.getString("telefon"));
				clan.setBrojClanskeKarte(rs.getString("brojClanskeKarte"));
				clan.setUlica(rs.getString("ulica"));
				clan.setBroj(rs.getString("broj"));

				System.out.println(clan.toString());
				System.out.println();
			}
			conn.close();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	// metoda menja adresu clana biblioteke ciji je id prosledjen zajedno sa ulicom
	// i brojem
	public static void update() throws SQLException {

		Scanner sc = new Scanner(System.in);

		try {
			System.out.println("Unesite id clana:");
			int id = Integer.parseInt(sc.next());
			System.out.println("Unesite novu ulicu:");
			String ulica = sc.next();
			System.out.println("Unesite novi broj:");
			String broj = sc.next();
			

			Connection conn = Konekcija.konekcija();
			String sqlupdate = "UPDATE `clanovi` SET `ulica`= ?,`broj`= ? WHERE id_clana = ?";
			PreparedStatement preps = conn.prepareStatement(sqlupdate);

			preps.setString(1, ulica);
			preps.setString(2, broj);
			preps.setInt(3, id);
			int brojRedova = preps.executeUpdate();
			if (brojRedova > 0) {
				System.out.println("Uspesno izvrsena izmena!");
				
			}
			
			conn.close();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	// metoda kreira novog clana biblioteke sa prosledjenim parametrima
	public static void create() {
		Scanner sc = new Scanner(System.in);

		try {
			System.out.println("Unos novog clana:");
			System.out.println("id?");
			int id = Integer.parseInt(sc.next());
			System.out.println("ime?");
			String ime = sc.next();
			System.out.println("prezime?");
			String prezime = sc.next();
			System.out.println("datum rodjenja?");
			String datRodj = sc.next();
			System.out.println("tel?");
			String tel = sc.next();
			System.out.println("broj cl karte?");
			String brclk = sc.next();
			System.out.println("ulica?");
			String ulica = sc.next();
			System.out.println("broj?");
			String broj = sc.next();
			sc.close();

			Connection conn = Konekcija.konekcija();
			String sqlcreate = "INSERT INTO `clanovi`(`id_clana`, `ime`, `prezime`, `datumrodjenja`, `telefon`, `brojclanskekarte`, `ulica`, `broj`) VALUES (?,?,?,?,?,?,?,?)";
			PreparedStatement ps = conn.prepareStatement(sqlcreate);

			ps.setInt(1, id);
			ps.setString(2, ime);
			ps.setString(3, prezime);
			ps.setString(4, datRodj);
			ps.setString(5, tel);
			ps.setString(6, brclk);
			ps.setString(7, ulica);
			ps.setString(8, broj);
			ps.executeUpdate();

		} catch (SQLException e) {

			e.printStackTrace();
		}

	}

	// metoda brise clana iza baze ciji je id prosedjen metodi
	public static void delete() {

		Scanner sc = new Scanner(System.in);
		System.out.println("Unesite id clana:");
		int id = sc.nextInt();
		sc.close();
		try {
			Connection conn = Konekcija.konekcija();
			String sqldelete = "DELETE * FROM clanovi WHERE id_clana = ?";
			PreparedStatement ps = conn.prepareStatement(sqldelete);
			ps.setInt(1, id);

			int brojRedova = ps.executeUpdate();
			if (brojRedova > 0) {
				System.out.println("Uspesno obrisan podatak!");
			}
			conn.close();
		} catch (SQLException e) {
			e.printStackTrace();
		}

	}
}
